#!/bin/bash
# Documentation Version Update Script
# ÊñáÊ°£ÁâàÊú¨Êõ¥Êñ∞ËÑöÊú¨

set -e

echo "üìö Starting documentation version update... ÂºÄÂßãÊñáÊ°£ÁâàÊú¨Êõ¥Êñ∞..."

PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
DOCS_DIR="$PROJECT_ROOT/docs"
VERSIONS_DIR="$DOCS_DIR/versions"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Function to get current version from package.json or default
get_current_version() {
    if [ -f "$PROJECT_ROOT/package.json" ]; then
        VERSION=$(grep '"version"' "$PROJECT_ROOT/package.json" | sed 's/.*"version": *"\([^"]*\)".*/\1/')
        echo "v$VERSION"
    else
        # Default version if no package.json
        echo "v1.0.0"
    fi
}

# Function to increment version
increment_version() {
    local version="$1"
    local type="${2:-patch}"  # patch, minor, major

    # Remove 'v' prefix
    version="${version#v}"

    # Split version into parts
    IFS='.' read -ra VERSION_PARTS <<< "$version"
    local major="${VERSION_PARTS[0]}"
    local minor="${VERSION_PARTS[1]:-0}"
    local patch="${VERSION_PARTS[2]:-0}"

    case "$type" in
        major)
            major=$((major + 1))
            minor=0
            patch=0
            ;;
        minor)
            minor=$((minor + 1))
            patch=0
            ;;
        patch)
            patch=$((patch + 1))
            ;;
        *)
            log_error "Invalid version type: $type"
            exit 1
            ;;
    esac

    echo "v$major.$minor.$patch"
}

# Create versions directory if it doesn't exist
mkdir -p "$VERSIONS_DIR"

# Get current version
CURRENT_VERSION=$(get_current_version)
log_info "Current version: $CURRENT_VERSION"
log_info "ÂΩìÂâçÁâàÊú¨: $CURRENT_VERSION"

# Check if current version directory exists
CURRENT_VERSION_DIR="$VERSIONS_DIR/$CURRENT_VERSION"
if [ ! -d "$CURRENT_VERSION_DIR" ]; then
    log_info "Creating directory for current version: $CURRENT_VERSION"
    log_info "‰∏∫ÂΩìÂâçÁâàÊú¨ÂàõÂª∫ÁõÆÂΩï: $CURRENT_VERSION"
    mkdir -p "$CURRENT_VERSION_DIR"
fi

# Function to create or update document template
create_document_template() {
    local doc_name="$1"
    local version="$2"
    local doc_path="$VERSIONS_DIR/$version/$doc_name"

    case "$doc_name" in
        "PRD.md")
            cat > "$doc_path" << EOF
# Product Requirements Document (PRD) $version
# ‰∫ßÂìÅÈúÄÊ±ÇÊñáÊ°£ $version

## Document Information / ÊñáÊ°£‰ø°ÊÅØ
- **Version / ÁâàÊú¨**: $version
- **Created / ÂàõÂª∫**: $(date)
- **Last Updated / ÊúÄÂêéÊõ¥Êñ∞**: $(date)

## Product Overview / ‰∫ßÂìÅÊ¶ÇËø∞

### Vision / ÊÑøÊôØ
Describe the product vision and goals here.
Âú®Ê≠§ÊèèËø∞‰∫ßÂìÅÊÑøÊôØÂíåÁõÆÊ†á„ÄÇ

### Target Users / ÁõÆÊ†áÁî®Êà∑
Define who will use this product.
ÂÆö‰πâË∞ÅÂ∞Ü‰ΩøÁî®Ê≠§‰∫ßÂìÅ„ÄÇ

## Features / ÂäüËÉΩ

### Core Features / Ê†∏ÂøÉÂäüËÉΩ

#### Feature 1: [Feature Name]
**Description / ÊèèËø∞**:
Brief description of the feature.
ÂäüËÉΩÁöÑÁÆÄË¶ÅÊèèËø∞„ÄÇ

**User Stories / Áî®Êà∑ÊïÖ‰∫ã**:
- As a user, I want to... so that...
- ‰Ωú‰∏∫Áî®Êà∑ÔºåÊàëÂ∏åÊúõ...‰ª•‰æø...

**Acceptance Criteria / È™åÊî∂Ê†áÂáÜ**:
- [ ] Criteria 1 / Ê†áÂáÜ1
- [ ] Criteria 2 / Ê†áÂáÜ2

### Secondary Features / Ê¨°Ë¶ÅÂäüËÉΩ

## Technical Requirements / ÊäÄÊúØË¶ÅÊ±Ç

### Performance / ÊÄßËÉΩ
- Response time requirements / ÂìçÂ∫îÊó∂Èó¥Ë¶ÅÊ±Ç
- Scalability targets / ÂèØÊâ©Â±ïÊÄßÁõÆÊ†á

### Security / ÂÆâÂÖ®
- Authentication requirements / ËÆ§ËØÅË¶ÅÊ±Ç
- Data protection needs / Êï∞ÊçÆ‰øùÊä§ÈúÄÊ±Ç

## Constraints / Á∫¶ÊùüÊù°‰ª∂

### Technical Constraints / ÊäÄÊúØÁ∫¶Êùü
- Technology stack limitations / ÊäÄÊúØÊ†àÈôêÂà∂
- Integration requirements / ÈõÜÊàêË¶ÅÊ±Ç

### Business Constraints / ‰∏öÂä°Á∫¶Êùü
- Timeline / Êó∂Èó¥Ë°®
- Budget / È¢ÑÁÆó
- Resources / ËµÑÊ∫ê

## Success Metrics / ÊàêÂäüÊåáÊ†á

### Key Performance Indicators (KPIs) / ÂÖ≥ÈîÆÊÄßËÉΩÊåáÊ†á
- Metric 1: Target value / ÊåáÊ†á1: ÁõÆÊ†áÂÄº
- Metric 2: Target value / ÊåáÊ†á2: ÁõÆÊ†áÂÄº

## Roadmap / Ë∑ØÁ∫øÂõæ

### Phase 1 / Á¨¨‰∏ÄÈò∂ÊÆµ
- Timeline: [Start Date] - [End Date]
- Êó∂Èó¥Ë°®: [ÂºÄÂßãÊó•Êúü] - [ÁªìÊùüÊó•Êúü]
- Deliverables / ‰∫§‰ªòÁâ©:
  - Feature A / ÂäüËÉΩA
  - Feature B / ÂäüËÉΩB

### Phase 2 / Á¨¨‰∫åÈò∂ÊÆµ
- Timeline: [Start Date] - [End Date]
- Êó∂Èó¥Ë°®: [ÂºÄÂßãÊó•Êúü] - [ÁªìÊùüÊó•Êúü]
- Deliverables / ‰∫§‰ªòÁâ©:
  - Feature C / ÂäüËÉΩC
  - Feature D / ÂäüËÉΩD

## Appendix / ÈôÑÂΩï

### References / ÂèÇËÄÉËµÑÊñô
- [Reference 1] / [ÂèÇËÄÉËµÑÊñô1]
- [Reference 2] / [ÂèÇËÄÉËµÑÊñô2]

### Glossary / ÊúØËØ≠Ë°®
- **Term 1 / ÊúØËØ≠1**: Definition / ÂÆö‰πâ
- **Term 2 / ÊúØËØ≠2**: Definition / ÂÆö‰πâ
EOF
            ;;

        "ARCHITECTURE.md")
            cat > "$doc_path" << EOF
# System Architecture Document $version
# Á≥ªÁªüÊû∂ÊûÑÊñáÊ°£ $version

## Document Information / ÊñáÊ°£‰ø°ÊÅØ
- **Version / ÁâàÊú¨**: $version
- **Created / ÂàõÂª∫**: $(date)
- **Last Updated / ÊúÄÂêéÊõ¥Êñ∞**: $(date)

## Architecture Overview / Êû∂ÊûÑÊ¶ÇËø∞

### System Purpose / Á≥ªÁªüÁõÆÁöÑ
Brief description of what the system does and its main objectives.
Á≥ªÁªüÂäüËÉΩÁöÑÁÆÄË¶ÅÊèèËø∞ÂèäÂÖ∂‰∏ªË¶ÅÁõÆÊ†á„ÄÇ

### Key Design Principles / ÂÖ≥ÈîÆËÆæËÆ°ÂéüÂàô
- Scalability / ÂèØÊâ©Â±ïÊÄß
- Maintainability / ÂèØÁª¥Êä§ÊÄß
- Security / ÂÆâÂÖ®ÊÄß
- Performance / ÊÄßËÉΩ

## System Components / Á≥ªÁªüÁªÑ‰ª∂

### High-Level Architecture / È´òÁ∫ßÊû∂ÊûÑ
\`\`\`
[Add architecture diagram here]
[Âú®Ê≠§Ê∑ªÂä†Êû∂ÊûÑÂõæ]
\`\`\`

### Component Descriptions / ÁªÑ‰ª∂ÊèèËø∞

#### Frontend Layer / ÂâçÁ´ØÂ±Ç
- **Technology / ÊäÄÊúØ**: [e.g., React, Vue.js]
- **Purpose / ÁõÆÁöÑ**: User interface and user experience
- **Key Features / ÂÖ≥ÈîÆÂäüËÉΩ**:
  - Feature 1 / ÂäüËÉΩ1
  - Feature 2 / ÂäüËÉΩ2

#### Backend Layer / ÂêéÁ´ØÂ±Ç
- **Technology / ÊäÄÊúØ**: [e.g., Node.js, Python, Java]
- **Purpose / ÁõÆÁöÑ**: Business logic and API endpoints
- **Key Features / ÂÖ≥ÈîÆÂäüËÉΩ**:
  - API management / APIÁÆ°ÁêÜ
  - Business logic / ‰∏öÂä°ÈÄªËæë
  - Data validation / Êï∞ÊçÆÈ™åËØÅ

#### Database Layer / Êï∞ÊçÆÂ∫ìÂ±Ç
- **Technology / ÊäÄÊúØ**: [e.g., PostgreSQL, MongoDB]
- **Purpose / ÁõÆÁöÑ**: Data persistence and management
- **Key Features / ÂÖ≥ÈîÆÂäüËÉΩ**:
  - Data storage / Êï∞ÊçÆÂ≠òÂÇ®
  - Query optimization / Êü•ËØ¢‰ºòÂåñ
  - Backup and recovery / Â§á‰ªΩÂíåÊÅ¢Â§ç

## Data Flow / Êï∞ÊçÆÊµÅ

### Request Flow / ËØ∑Ê±ÇÊµÅÁ®ã
1. User initiates request / Áî®Êà∑ÂèëËµ∑ËØ∑Ê±Ç
2. Frontend processes input / ÂâçÁ´ØÂ§ÑÁêÜËæìÂÖ•
3. API call to backend / Ë∞ÉÁî®ÂêéÁ´ØAPI
4. Backend processes request / ÂêéÁ´ØÂ§ÑÁêÜËØ∑Ê±Ç
5. Database interaction / Êï∞ÊçÆÂ∫ì‰∫§‰∫í
6. Response sent back / ËøîÂõûÂìçÂ∫î

### Data Models / Êï∞ÊçÆÊ®°Âûã
\`\`\`typescript
// Example data model
interface User {
  id: string;
  name: string;
  email: string;
  createdAt: Date;
}
\`\`\`

## Technology Stack / ÊäÄÊúØÊ†à

### Frontend / ÂâçÁ´Ø
- Framework: [Technology] / Ê°ÜÊû∂: [ÊäÄÊúØ]
- State Management: [Technology] / Áä∂ÊÄÅÁÆ°ÁêÜ: [ÊäÄÊúØ]
- Styling: [Technology] / Ê†∑Âºè: [ÊäÄÊúØ]

### Backend / ÂêéÁ´Ø
- Runtime: [Technology] / ËøêË°åÊó∂: [ÊäÄÊúØ]
- Framework: [Technology] / Ê°ÜÊû∂: [ÊäÄÊúØ]
- Authentication: [Technology] / ËÆ§ËØÅ: [ÊäÄÊúØ]

### Database / Êï∞ÊçÆÂ∫ì
- Primary Database: [Technology] / ‰∏ªÊï∞ÊçÆÂ∫ì: [ÊäÄÊúØ]
- Caching: [Technology] / ÁºìÂ≠ò: [ÊäÄÊúØ]

### DevOps / ËøêÁª¥
- Containerization: [Technology] / ÂÆπÂô®Âåñ: [ÊäÄÊúØ]
- CI/CD: [Technology] / ÊåÅÁª≠ÈõÜÊàê/ÈÉ®ÁΩ≤: [ÊäÄÊúØ]
- Monitoring: [Technology] / ÁõëÊéß: [ÊäÄÊúØ]

## Security Architecture / ÂÆâÂÖ®Êû∂ÊûÑ

### Authentication / ËÆ§ËØÅ
- Method: [e.g., JWT, OAuth2] / ÊñπÊ≥ï: [‰æãÂ¶Ç: JWT, OAuth2]
- Implementation details / ÂÆûÁé∞ÁªÜËäÇ

### Authorization / ÊéàÊùÉ
- Role-based access control / Âü∫‰∫éËßíËâ≤ÁöÑËÆøÈóÆÊéßÂà∂
- Permission management / ÊùÉÈôêÁÆ°ÁêÜ

### Data Protection / Êï∞ÊçÆ‰øùÊä§
- Encryption at rest / ÈùôÊÄÅÂä†ÂØÜ
- Encryption in transit / ‰º†ËæìÂä†ÂØÜ
- Data anonymization / Êï∞ÊçÆÂåøÂêçÂåñ

## Performance Considerations / ÊÄßËÉΩËÄÉËôë

### Scalability Strategy / ÂèØÊâ©Â±ïÊÄßÁ≠ñÁï•
- Horizontal scaling / Ê∞¥Âπ≥Êâ©Â±ï
- Load balancing / Ë¥üËΩΩÂùáË°°
- Caching strategy / ÁºìÂ≠òÁ≠ñÁï•

### Performance Targets / ÊÄßËÉΩÁõÆÊ†á
- Response time: < 200ms / ÂìçÂ∫îÊó∂Èó¥: < 200ms
- Throughput: X requests/second / ÂêûÂêêÈáè: X ËØ∑Ê±Ç/Áßí
- Availability: 99.9% / ÂèØÁî®ÊÄß: 99.9%

## Deployment Architecture / ÈÉ®ÁΩ≤Êû∂ÊûÑ

### Environment Setup / ÁéØÂ¢ÉËÆæÁΩÆ
- Development / ÂºÄÂèëÁéØÂ¢É
- Staging / ÊµãËØïÁéØÂ¢É
- Production / Áîü‰∫ßÁéØÂ¢É

### Infrastructure / Âü∫Á°ÄËÆæÊñΩ
- Cloud provider: [e.g., AWS, Azure] / ‰∫ëÊúçÂä°ÂïÜ: [‰æãÂ¶Ç: AWS, Azure]
- Container orchestration / ÂÆπÂô®ÁºñÊéí
- Database hosting / Êï∞ÊçÆÂ∫ìÊâòÁÆ°

## Monitoring and Logging / ÁõëÊéßÂíåÊó•Âøó

### Monitoring Strategy / ÁõëÊéßÁ≠ñÁï•
- Application performance monitoring / Â∫îÁî®ÊÄßËÉΩÁõëÊéß
- Infrastructure monitoring / Âü∫Á°ÄËÆæÊñΩÁõëÊéß
- User experience monitoring / Áî®Êà∑‰ΩìÈ™åÁõëÊéß

### Logging Strategy / Êó•ÂøóÁ≠ñÁï•
- Log levels and categories / Êó•ÂøóÁ∫ßÂà´ÂíåÂàÜÁ±ª
- Log aggregation and analysis / Êó•ÂøóËÅöÂêàÂíåÂàÜÊûê
- Retention policies / ‰øùÁïôÁ≠ñÁï•

## Risk Assessment / È£éÈô©ËØÑ‰º∞

### Technical Risks / ÊäÄÊúØÈ£éÈô©
- Risk 1: Description and mitigation / È£éÈô©1: ÊèèËø∞ÂíåÁºìËß£Êé™ÊñΩ
- Risk 2: Description and mitigation / È£éÈô©2: ÊèèËø∞ÂíåÁºìËß£Êé™ÊñΩ

### Operational Risks / ËøêËê•È£éÈô©
- Risk 1: Description and mitigation / È£éÈô©1: ÊèèËø∞ÂíåÁºìËß£Êé™ÊñΩ
- Risk 2: Description and mitigation / È£éÈô©2: ÊèèËø∞ÂíåÁºìËß£Êé™ÊñΩ

## Future Considerations / Êú™Êù•ËÄÉËôë

### Planned Improvements / ËÆ°ÂàíÊîπËøõ
- Architecture evolution / Êû∂ÊûÑÊºîËøõ
- Technology upgrades / ÊäÄÊúØÂçáÁ∫ß
- Performance optimizations / ÊÄßËÉΩ‰ºòÂåñ

### Scalability Roadmap / ÂèØÊâ©Â±ïÊÄßË∑ØÁ∫øÂõæ
- Short-term (3-6 months) / Áü≠Êúü (3-6‰∏™Êúà)
- Medium-term (6-12 months) / ‰∏≠Êúü (6-12‰∏™Êúà)
- Long-term (1+ years) / ÈïøÊúü (1Âπ¥‰ª•‰∏ä)
EOF
            ;;

        "API.md")
            cat > "$doc_path" << EOF
# API Specification Document $version
# APIËßÑËåÉÊñáÊ°£ $version

## Document Information / ÊñáÊ°£‰ø°ÊÅØ
- **Version / ÁâàÊú¨**: $version
- **Created / ÂàõÂª∫**: $(date)
- **Last Updated / ÊúÄÂêéÊõ¥Êñ∞**: $(date)
- **API Version / APIÁâàÊú¨**: v1

## API Overview / APIÊ¶ÇËø∞

### Base Information / Âü∫Êú¨‰ø°ÊÅØ
- **Base URL / Âü∫Á°ÄURL**: \`https://api.example.com/v1\`
- **Protocol / ÂçèËÆÆ**: HTTPS
- **Authentication / ËÆ§ËØÅ**: Bearer Token
- **Response Format / ÂìçÂ∫îÊ†ºÂºè**: JSON

### Design Principles / ËÆæËÆ°ÂéüÂàô
- RESTful design / RESTfulËÆæËÆ°
- Consistent naming conventions / ‰∏ÄËá¥ÁöÑÂëΩÂêçÁ∫¶ÂÆö
- Comprehensive error handling / ÂÖ®Èù¢ÁöÑÈîôËØØÂ§ÑÁêÜ
- Proper HTTP status codes / Ê≠£Á°ÆÁöÑHTTPÁä∂ÊÄÅÁ†Å

## Authentication / ËÆ§ËØÅ

### Bearer Token / ÊâøËΩΩ‰ª§Áâå
\`\`\`http
Authorization: Bearer <token>
\`\`\`

### Token Acquisition / ‰ª§ÁâåËé∑Âèñ
\`\`\`http
POST /auth/login
Content-Type: application/json

{
  "email": "user@example.com",
  "password": "password123"
}
\`\`\`

**Response / ÂìçÂ∫î**:
\`\`\`json
{
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
  "expiresIn": 3600,
  "user": {
    "id": "123",
    "email": "user@example.com",
    "name": "John Doe"
  }
}
\`\`\`

## Core Endpoints / Ê†∏ÂøÉÁ´ØÁÇπ

### Users / Áî®Êà∑

#### Get User Profile / Ëé∑ÂèñÁî®Êà∑ËµÑÊñô
\`\`\`http
GET /users/me
Authorization: Bearer <token>
\`\`\`

**Response / ÂìçÂ∫î**:
\`\`\`json
{
  "id": "123",
  "email": "user@example.com",
  "name": "John Doe",
  "avatar": "https://example.com/avatar.jpg",
  "createdAt": "2024-01-01T00:00:00Z",
  "updatedAt": "2024-01-01T00:00:00Z"
}
\`\`\`

#### Update User Profile / Êõ¥Êñ∞Áî®Êà∑ËµÑÊñô
\`\`\`http
PATCH /users/me
Authorization: Bearer <token>
Content-Type: application/json

{
  "name": "Jane Doe",
  "avatar": "https://example.com/new-avatar.jpg"
}
\`\`\`

### Projects / È°πÁõÆ

#### List Projects / È°πÁõÆÂàóË°®
\`\`\`http
GET /projects
Authorization: Bearer <token>
\`\`\`

**Query Parameters / Êü•ËØ¢ÂèÇÊï∞**:
- \`page\` (integer): Page number / È°µÁ†Å (default: 1)
- \`limit\` (integer): Items per page / ÊØèÈ°µÈ°πÁõÆÊï∞ (default: 10, max: 100)
- \`search\` (string): Search term / ÊêúÁ¥¢ËØç
- \`status\` (string): Project status / È°πÁõÆÁä∂ÊÄÅ (active, archived, draft)

**Response / ÂìçÂ∫î**:
\`\`\`json
{
  "data": [
    {
      "id": "proj_123",
      "name": "My Project",
      "description": "Project description",
      "status": "active",
      "createdAt": "2024-01-01T00:00:00Z",
      "updatedAt": "2024-01-01T00:00:00Z"
    }
  ],
  "pagination": {
    "page": 1,
    "limit": 10,
    "total": 25,
    "totalPages": 3
  }
}
\`\`\`

#### Create Project / ÂàõÂª∫È°πÁõÆ
\`\`\`http
POST /projects
Authorization: Bearer <token>
Content-Type: application/json

{
  "name": "New Project",
  "description": "Project description",
  "tags": ["web", "api"]
}
\`\`\`

#### Get Project / Ëé∑ÂèñÈ°πÁõÆ
\`\`\`http
GET /projects/{id}
Authorization: Bearer <token>
\`\`\`

#### Update Project / Êõ¥Êñ∞È°πÁõÆ
\`\`\`http
PATCH /projects/{id}
Authorization: Bearer <token>
Content-Type: application/json

{
  "name": "Updated Project Name",
  "description": "Updated description"
}
\`\`\`

#### Delete Project / Âà†Èô§È°πÁõÆ
\`\`\`http
DELETE /projects/{id}
Authorization: Bearer <token>
\`\`\`

## Data Models / Êï∞ÊçÆÊ®°Âûã

### User Model / Áî®Êà∑Ê®°Âûã
\`\`\`typescript
interface User {
  id: string;
  email: string;
  name: string;
  avatar?: string;
  role: 'user' | 'admin';
  createdAt: string;
  updatedAt: string;
}
\`\`\`

### Project Model / È°πÁõÆÊ®°Âûã
\`\`\`typescript
interface Project {
  id: string;
  name: string;
  description: string;
  status: 'draft' | 'active' | 'archived';
  tags: string[];
  ownerId: string;
  createdAt: string;
  updatedAt: string;
}
\`\`\`

## Error Handling / ÈîôËØØÂ§ÑÁêÜ

### Error Response Format / ÈîôËØØÂìçÂ∫îÊ†ºÂºè
\`\`\`json
{
  "error": {
    "code": "VALIDATION_ERROR",
    "message": "Validation failed",
    "details": [
      {
        "field": "email",
        "message": "Email is required"
      }
    ]
  }
}
\`\`\`

### Common Error Codes / Â∏∏ËßÅÈîôËØØ‰ª£Á†Å

| Status Code | Error Code | Description |
|------------|------------|-------------|
| 400 | VALIDATION_ERROR | Request validation failed / ËØ∑Ê±ÇÈ™åËØÅÂ§±Ë¥• |
| 401 | UNAUTHORIZED | Authentication required / ÈúÄË¶ÅËÆ§ËØÅ |
| 403 | FORBIDDEN | Access denied / ËÆøÈóÆË¢´ÊãíÁªù |
| 404 | NOT_FOUND | Resource not found / ËµÑÊ∫êÊú™ÊâæÂà∞ |
| 409 | CONFLICT | Resource already exists / ËµÑÊ∫êÂ∑≤Â≠òÂú® |
| 429 | RATE_LIMITED | Too many requests / ËØ∑Ê±ÇËøáÂ§ö |
| 500 | INTERNAL_ERROR | Internal server error / ÂÜÖÈÉ®ÊúçÂä°Âô®ÈîôËØØ |

## Rate Limiting / ÈÄüÁéáÈôêÂà∂

### Limits / ÈôêÂà∂
- **General endpoints / ‰∏ÄËà¨Á´ØÁÇπ**: 1000 requests/hour
- **Authentication endpoints / ËÆ§ËØÅÁ´ØÁÇπ**: 100 requests/hour
- **Upload endpoints / ‰∏ä‰º†Á´ØÁÇπ**: 50 requests/hour

### Headers / ËØ∑Ê±ÇÂ§¥
\`\`\`http
X-RateLimit-Limit: 1000
X-RateLimit-Remaining: 999
X-RateLimit-Reset: 1640995200
\`\`\`

## Pagination / ÂàÜÈ°µ

### Query Parameters / Êü•ËØ¢ÂèÇÊï∞
- \`page\`: Page number (starting from 1) / È°µÁ†ÅÔºà‰ªé1ÂºÄÂßãÔºâ
- \`limit\`: Items per page (max 100) / ÊØèÈ°µÈ°πÁõÆÊï∞ÔºàÊúÄÂ§ö100Ôºâ

### Response Format / ÂìçÂ∫îÊ†ºÂºè
\`\`\`json
{
  "data": [...],
  "pagination": {
    "page": 1,
    "limit": 10,
    "total": 100,
    "totalPages": 10,
    "hasNext": true,
    "hasPrev": false
  }
}
\`\`\`

## Webhooks / ÁΩëÁªúÈí©Â≠ê

### Configuration / ÈÖçÁΩÆ
\`\`\`http
POST /webhooks
Authorization: Bearer <token>
Content-Type: application/json

{
  "url": "https://example.com/webhook",
  "events": ["project.created", "project.updated"],
  "secret": "webhook_secret_key"
}
\`\`\`

### Event Types / ‰∫ã‰ª∂Á±ªÂûã
- \`user.created\` / Áî®Êà∑Â∑≤ÂàõÂª∫
- \`user.updated\` / Áî®Êà∑Â∑≤Êõ¥Êñ∞
- \`project.created\` / È°πÁõÆÂ∑≤ÂàõÂª∫
- \`project.updated\` / È°πÁõÆÂ∑≤Êõ¥Êñ∞
- \`project.deleted\` / È°πÁõÆÂ∑≤Âà†Èô§

## SDK Examples / SDKÁ§∫‰æã

### JavaScript/TypeScript
\`\`\`typescript
import { ApiClient } from '@project/api-client';

const client = new ApiClient({
  baseURL: 'https://api.example.com/v1',
  token: 'your-auth-token'
});

// Get user profile
const user = await client.users.getMe();

// List projects
const projects = await client.projects.list({
  page: 1,
  limit: 10
});

// Create project
const newProject = await client.projects.create({
  name: 'My New Project',
  description: 'Project description'
});
\`\`\`

### Python
\`\`\`python
from project_api import ApiClient

client = ApiClient(
    base_url='https://api.example.com/v1',
    token='your-auth-token'
)

# Get user profile
user = client.users.get_me()

# List projects
projects = client.projects.list(page=1, limit=10)

# Create project
new_project = client.projects.create({
    'name': 'My New Project',
    'description': 'Project description'
})
\`\`\`

## Testing / ÊµãËØï

### Test Environment / ÊµãËØïÁéØÂ¢É
- **Base URL / Âü∫Á°ÄURL**: \`https://api-staging.example.com/v1\`
- **Test Credentials / ÊµãËØïÂá≠ÊçÆ**: Contact development team / ËÅîÁ≥ªÂºÄÂèëÂõ¢Èòü

### Postman Collection / PostmanÈõÜÂêà
[Link to Postman collection] / [PostmanÈõÜÂêàÈìæÊé•]

## Changelog / Êõ¥Êñ∞Êó•Âøó

### Version $version
- Initial API documentation / ÂàùÂßãAPIÊñáÊ°£
- Core endpoints implemented / Ê†∏ÂøÉÁ´ØÁÇπÂ∑≤ÂÆûÁé∞
- Authentication system / ËÆ§ËØÅÁ≥ªÁªü
- Error handling / ÈîôËØØÂ§ÑÁêÜ
EOF
            ;;

        "CHANGELOG.md")
            cat > "$doc_path" << EOF
# Changelog $version
# Êõ¥Êñ∞Êó•Âøó $version

## [$version] - $(date +%Y-%m-%d)

### Added / Êñ∞Â¢û
- Initial project setup / ÂàùÂßãÈ°πÁõÆËÆæÁΩÆ
- Core documentation structure / Ê†∏ÂøÉÊñáÊ°£ÁªìÊûÑ
- Version management system / ÁâàÊú¨ÁÆ°ÁêÜÁ≥ªÁªü

### Changed / Êõ¥Êîπ
- Documentation templates updated / ÊñáÊ°£Ê®°ÊùøÂ∑≤Êõ¥Êñ∞
- Project structure improvements / È°πÁõÆÁªìÊûÑÊîπËøõ

### Fixed / ‰øÆÂ§ç
- Documentation consistency issues / ÊñáÊ°£‰∏ÄËá¥ÊÄßÈóÆÈ¢ò
- Template formatting / Ê®°ÊùøÊ†ºÂºèÂåñ

### Security / ÂÆâÂÖ®
- Added security scanning / Ê∑ªÂä†ÂÆâÂÖ®Êâ´Êèè
- Implemented access controls / ÂÆûÊñΩËÆøÈóÆÊéßÂà∂

---

## Format / Ê†ºÂºèËØ¥Êòé

This changelog follows the [Keep a Changelog](https://keepachangelog.com/) format.
Ê≠§Êõ¥Êñ∞Êó•ÂøóÈÅµÂæ™ [Keep a Changelog](https://keepachangelog.com/) Ê†ºÂºè„ÄÇ

### Types of changes / ÂèòÊõ¥Á±ªÂûã:
- **Added / Êñ∞Â¢û**: for new features / Êñ∞ÂäüËÉΩ
- **Changed / Êõ¥Êîπ**: for changes in existing functionality / Áé∞ÊúâÂäüËÉΩÁöÑÊõ¥Êîπ
- **Deprecated / ÂºÉÁî®**: for soon-to-be removed features / Âç≥Â∞ÜÂà†Èô§ÁöÑÂäüËÉΩ
- **Removed / Âà†Èô§**: for now removed features / Áé∞Â∑≤Âà†Èô§ÁöÑÂäüËÉΩ
- **Fixed / ‰øÆÂ§ç**: for any bug fixes / ÈîôËØØ‰øÆÂ§ç
- **Security / ÂÆâÂÖ®**: in case of vulnerabilities / ÂÆâÂÖ®ÊºèÊ¥û‰øÆÂ§ç
EOF
            ;;
    esac

    log_success "Created/updated $doc_name for $version"
    log_success "Â∑≤ÂàõÂª∫/Êõ¥Êñ∞ $version ÁöÑ $doc_name"
}

# 1. Update current version documents
log_info "Updating documents for current version: $CURRENT_VERSION"
log_info "Êõ¥Êñ∞ÂΩìÂâçÁâàÊú¨ÁöÑÊñáÊ°£: $CURRENT_VERSION"

CORE_DOCS=("PRD.md" "ARCHITECTURE.md" "API.md" "CHANGELOG.md")

for doc in "${CORE_DOCS[@]}"; do
    create_document_template "$doc" "$CURRENT_VERSION"
done

# 2. Check if we need to create a new version
if [ "$1" = "--new-version" ]; then
    VERSION_TYPE="${2:-minor}"  # patch, minor, major
    NEW_VERSION=$(increment_version "$CURRENT_VERSION" "$VERSION_TYPE")

    log_info "Creating new version: $NEW_VERSION"
    log_info "ÂàõÂª∫Êñ∞ÁâàÊú¨: $NEW_VERSION"

    NEW_VERSION_DIR="$VERSIONS_DIR/$NEW_VERSION"
    mkdir -p "$NEW_VERSION_DIR"

    # Copy current version as base for new version
    if [ -d "$CURRENT_VERSION_DIR" ]; then
        cp -r "$CURRENT_VERSION_DIR"/* "$NEW_VERSION_DIR/"
        log_success "Copied $CURRENT_VERSION documents to $NEW_VERSION"
        log_success "Â∑≤Â∞Ü $CURRENT_VERSION ÊñáÊ°£Â§çÂà∂Âà∞ $NEW_VERSION"
    fi

    # Update changelog for new version
    create_document_template "CHANGELOG.md" "$NEW_VERSION"

    # Create CHANGES.md to document what changed from previous version
    cat > "$NEW_VERSION_DIR/CHANGES.md" << EOF
# Version Change Document ÁâàÊú¨ÂèòÊõ¥ÊñáÊ°£ $NEW_VERSION

## Basic Information Âü∫Á°Ä‰ø°ÊÅØ
- **Base Version Âü∫‰∫éÁâàÊú¨**: $CURRENT_VERSION
- **Target Version ÁõÆÊ†áÁâàÊú¨**: $NEW_VERSION
- **Change Type ÂèòÊõ¥Á±ªÂûã**: $VERSION_TYPE
- **Change Date ÂèòÊõ¥Êó•Êúü**: $(date)

## Summary Ê¶ÇË¶Å
Brief description of what changed in this version.
Ê≠§ÁâàÊú¨ÂèòÊõ¥ÁöÑÁÆÄË¶ÅÊèèËø∞„ÄÇ

## Requirement Changes ÈúÄÊ±ÇÂèòÊõ¥

### New Features Êñ∞Â¢ûÂäüËÉΩ
- Feature 1: Description / ÂäüËÉΩ1: ÊèèËø∞
- Feature 2: Description / ÂäüËÉΩ2: ÊèèËø∞

### Modified Features ‰øÆÊîπÂäüËÉΩ
- Feature X: Change description / ÂäüËÉΩX: ÂèòÊõ¥ÊèèËø∞

### Removed Features Âà†Èô§ÂäüËÉΩ
- Feature Y: Removal reason / ÂäüËÉΩY: Âà†Èô§ÂéüÂõ†

## Technical Changes ÊäÄÊúØÂèòÊõ¥

### Architecture Adjustments Êû∂ÊûÑË∞ÉÊï¥
- Change 1: Description and reason / ÂèòÊõ¥1: ÊèèËø∞ÂíåÂéüÂõ†

### Database Changes Êï∞ÊçÆÂ∫ìÂèòÊõ¥
- Migration required: Yes/No / ÊòØÂê¶ÈúÄË¶ÅËøÅÁßª: ÊòØ/Âê¶
- Backup required: Yes/No / ÊòØÂê¶ÈúÄË¶ÅÂ§á‰ªΩ: ÊòØ/Âê¶

### API Changes APIÂèòÊõ¥
- Breaking changes: List any breaking changes / Á†¥ÂùèÊÄßÂèòÊõ¥: ÂàóÂá∫‰ªª‰ΩïÁ†¥ÂùèÊÄßÂèòÊõ¥
- New endpoints: List new endpoints / Êñ∞Á´ØÁÇπ: ÂàóÂá∫Êñ∞Á´ØÁÇπ

## Impact Analysis ÂΩ±ÂìçÂàÜÊûê

### Code Files ‰ª£Á†ÅÊñá‰ª∂
- Files to modify ÈúÄË¶Å‰øÆÊîπÁöÑÊñá‰ª∂: [To be determined]
- Files to add ÈúÄË¶ÅÊñ∞Â¢ûÁöÑÊñá‰ª∂: [To be determined]
- Files to delete ÈúÄË¶ÅÂà†Èô§ÁöÑÊñá‰ª∂: [To be determined]

### Testing Requirements ÊµãËØïË¶ÅÊ±Ç
- New test cases Êñ∞Â¢ûÊµãËØïÁî®‰æã: [To be determined]
- Regression tests ÂõûÂΩíÊµãËØï: Required / ÂøÖÈúÄ

## Claude Code Execution Instructions Claude Code ÊâßË°åÊåá‰ª§

\`\`\`bash
# Step 1: Analyze differences Ê≠•È™§1: ÂàÜÊûêÂ∑ÆÂºÇ
claude-code "Analyze differences between docs/versions/$CURRENT_VERSION and docs/versions/$NEW_VERSION"

# Step 2: Update implementation Ê≠•È™§2: Êõ¥Êñ∞ÂÆûÁé∞
claude-code "Update code implementation based on changes documented in docs/versions/$NEW_VERSION/CHANGES.md"

# Step 3: Update tests Ê≠•È™§3: Êõ¥Êñ∞ÊµãËØï
claude-code "Add test cases for new features and update existing tests based on version changes"

# Step 4: Verify changes Ê≠•È™§4: È™åËØÅÂèòÊõ¥
claude-code "Run tests and verify all functionality works correctly"
\`\`\`

## Deployment Checklist ÈÉ®ÁΩ≤Ê∏ÖÂçï
- [ ] Code changes implemented / ‰ª£Á†ÅÂèòÊõ¥Â∑≤ÂÆûÁé∞
- [ ] Tests updated and passing / ÊµãËØïÂ∑≤Êõ¥Êñ∞Âπ∂ÈÄöËøá
- [ ] Documentation updated / ÊñáÊ°£Â∑≤Êõ¥Êñ∞
- [ ] Database migration prepared (if needed) / Êï∞ÊçÆÂ∫ìËøÅÁßªÂ∑≤ÂáÜÂ§áÔºàÂ¶ÇÈúÄË¶ÅÔºâ
- [ ] Deployment plan reviewed / ÈÉ®ÁΩ≤ËÆ°ÂàíÂ∑≤ÂÆ°Êü•
- [ ] Rollback plan prepared / ÂõûÊªöËÆ°ÂàíÂ∑≤ÂáÜÂ§á

---
Generated by Claude Code Documentation Version Manager
Áî±Claude CodeÊñáÊ°£ÁâàÊú¨ÁÆ°ÁêÜÂô®ÁîüÊàê
EOF

    log_success "Created CHANGES.md for $NEW_VERSION"
    log_success "Â∑≤‰∏∫ $NEW_VERSION ÂàõÂª∫ CHANGES.md"

    # Update package.json version if it exists
    if [ -f "$PROJECT_ROOT/package.json" ]; then
        # Remove 'v' prefix for package.json
        PACKAGE_VERSION="${NEW_VERSION#v}"
        sed -i.bak "s/\"version\": *\"[^\"]*\"/\"version\": \"$PACKAGE_VERSION\"/" "$PROJECT_ROOT/package.json"
        rm -f "$PROJECT_ROOT/package.json.bak"
        log_success "Updated package.json version to $PACKAGE_VERSION"
        log_success "Â∑≤Â∞Üpackage.jsonÁâàÊú¨Êõ¥Êñ∞‰∏∫ $PACKAGE_VERSION"
    fi
fi

# 3. Generate version summary report
log_info "Generating version summary... ÁîüÊàêÁâàÊú¨ÊÄªÁªì..."

SUMMARY_FILE="$DOCS_DIR/version-summary.md"
cat > "$SUMMARY_FILE" << EOF
# Documentation Version Summary
# ÊñáÊ°£ÁâàÊú¨ÊÄªÁªì

Generated on: $(date)
ÁîüÊàêÊó∂Èó¥: $(date)

## Available Versions / ÂèØÁî®ÁâàÊú¨
EOF

if [ -d "$VERSIONS_DIR" ]; then
    find "$VERSIONS_DIR" -maxdepth 1 -type d -name "v*" | sort -V | while read -r version_dir; do
        version_name=$(basename "$version_dir")
        echo "- **$version_name**: $(find "$version_dir" -name "*.md" | wc -l) documents" >> "$SUMMARY_FILE"
    done
else
    echo "No versions found / Êú™ÊâæÂà∞ÁâàÊú¨" >> "$SUMMARY_FILE"
fi

cat >> "$SUMMARY_FILE" << EOF

## Current Version / ÂΩìÂâçÁâàÊú¨
$CURRENT_VERSION

## Last Updated / ÊúÄÂêéÊõ¥Êñ∞
$(date)

## Usage / ‰ΩøÁî®ÊñπÊ≥ï

### Create New Version / ÂàõÂª∫Êñ∞ÁâàÊú¨
\`\`\`bash
bash scripts/update-doc-versions.sh --new-version [patch|minor|major]
\`\`\`

### Examples / Á§∫‰æã
\`\`\`bash
# Create patch version (v1.0.0 -> v1.0.1)
bash scripts/update-doc-versions.sh --new-version patch

# Create minor version (v1.0.1 -> v1.1.0)
bash scripts/update-doc-versions.sh --new-version minor

# Create major version (v1.1.0 -> v2.0.0)
bash scripts/update-doc-versions.sh --new-version major
\`\`\`

---
Generated by Claude Code Documentation Version Manager
Áî±Claude CodeÊñáÊ°£ÁâàÊú¨ÁÆ°ÁêÜÂô®ÁîüÊàê
EOF

log_success "üéâ Documentation version update completed! ÊñáÊ°£ÁâàÊú¨Êõ¥Êñ∞ÂÆåÊàêÔºÅ"
log_info "Summary report generated: $SUMMARY_FILE"
log_info "ÊÄªÁªìÊä•ÂëäÂ∑≤ÁîüÊàê: $SUMMARY_FILE"

if [ "$1" = "--new-version" ]; then
    log_info "üöÄ New version $NEW_VERSION created and ready for development"
    log_info "üöÄ Êñ∞ÁâàÊú¨ $NEW_VERSION Â∑≤ÂàõÂª∫Âπ∂ÂáÜÂ§áÂºÄÂèë"
    log_info "Next steps / ‰∏ã‰∏ÄÊ≠•:"
    echo "  1. Review and update the CHANGES.md file"
    echo "     Ê£ÄÊü•Âπ∂Êõ¥Êñ∞ CHANGES.md Êñá‰ª∂"
    echo "  2. Run Claude Code to implement changes"
    echo "     ËøêË°å Claude Code ÂÆûÁé∞ÂèòÊõ¥"
    echo "  3. Test and validate the implementation"
    echo "     ÊµãËØïÂπ∂È™åËØÅÂÆûÁé∞"
fi

exit 0